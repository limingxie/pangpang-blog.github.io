<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PangPang - Blog</title>
    <link>https://limingxie.github.io/</link>
    <description>Recent content on PangPang - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>北京衣念科技发展有限公司 PangPang-Blog</copyright>
    <lastBuildDate>Wed, 14 Mar 2018 10:14:08 +0800</lastBuildDate>
    
	<atom:link href="https://limingxie.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用hugo搭建个人博客</title>
      <link>https://limingxie.github.io/limingxie/hugo_create/</link>
      <pubDate>Wed, 14 Mar 2018 10:14:08 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/hugo_create/</guid>
      <description>这几天研究了用hugo搭建个人博客。
简单的整理了一下。
1.安装hugo（windows 请查看官网介绍 https://gohugo.io/getting-started/installing/）
$ brew install hugo  之后检查版本
$ hugo version Hugo Static Site Generator v0.37.1 darwin/amd64 BuildDate:  2.创建hugo 项目
$ hugo new site my-blog Congratulations! Your new Hugo site is created in /Users/limingxie/Projects/my-blog. Just a few more steps and you&#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/, or create your own with the &amp;quot;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;quot; command.</description>
    </item>
    
    <item>
      <title>通过1000个代码重构，学习到的知识点</title>
      <link>https://limingxie.github.io/liche/1000codereviews/</link>
      <pubDate>Fri, 09 Mar 2018 18:25:31 +0800</pubDate>
      
      <guid>https://limingxie.github.io/liche/1000codereviews/</guid>
      <description>通过1000个代码重构，学习到的知识点 (What I learned from doing 1000 code reviews)(翻译) 在LinkedIn工作的时候，我大部分的工作都是做代码检查。有一些建议不断地反复出现，所以我决定把我和团队分享的清单放在一起。
建议 1: 出错时请抛（throw）出一个异常（exception）
我看到的一个常见的模式是：
List&amp;lt;String&amp;gt; getSearchResults(...) { try { List&amp;lt;String&amp;gt; results = // make REST call to search service return results; } catch (RemoteInvocationException e) { return Collections.emptyList(); } }  这种模式实际上造成了我开发过的移动应用程序的中断。
我们使用的搜索后端开始抛出异常。然而，应用程序的API服务器有一些类似于上面的代码。因此，从应用程序的角度来看，它获得了200的成功响应，并愉快地显示了空列表。
相反，如果API抛出了一个异常，那么我们的监控系统就会立即将其提取出来，并修复。
很多时候，当你遇到异常时，为了便利返回空对象。在java中空对象的例子是Optional.empty()，null,empty list。在解析URL时总是出现这样的问题。如果无法从字符串中解析URL，返回值为null。可以自问：“为什么URL是错误的？”我们应该在上游解决的数据问题吗？“
空对象不是处理这项工作的合适工具。如果发生异常，则应抛出异常。
建议2：尽可能使用具体的类型(type)
这个建议基本上跟stringly typed programming（强类型编程）是相反的。
我经常看到类似这些例子的代码。
void doOperation(String opType, Data data); // where opType is &amp;quot;insert&amp;quot;, &amp;quot;append&amp;quot;, or &amp;quot;delete&amp;quot;, this should have clearly been an enum String fetchWebsite(String url); // where url is &amp;quot;https://google.</description>
    </item>
    
    <item>
      <title>Go My Way #2 - DataBase, Logging</title>
      <link>https://limingxie.github.io/liche/go_my_way2/</link>
      <pubDate>Fri, 09 Mar 2018 18:23:37 +0800</pubDate>
      
      <guid>https://limingxie.github.io/liche/go_my_way2/</guid>
      <description>Go My Way #2 - DataBase, Logging Jun 14, 2017
Go My Way是介绍我用Go语言开发web应用时首选方案的3篇文章 . 没读过之前的文章，请下面的链接.
 Go My Way #1 - web 框架 Go My Way #2 - DataBase, Logging Go My Way #3 - Configuration, Tracing, etc. gomobile  这篇文章介绍数据库和日志
数据库 跟其他语言的ORM（Ruby的active record，.Net的entityframework,Java的JPA,等）相比，Go的DB相关的Package不足之处较多。但是Go社区出现了相关讨论的文章。“什么样的Go ORM 框架优秀? ”的问题(Golang which ORM is better)中，大部分人的意见是提供轻便的query mapper(执行sql语句的返回值绑定到Struct)功能就足够。也有推荐用native query(sql 语句，或者转化成sql语句)开发的文章(Our Go is fine but our SQL is great)。
根据Go社区的趋势判断，不会出现 Active Record或者 Hibernate类似的ORM框架。
本人以前也认为操作DB时应该使用ORM，相比native query，使用ORM提供的抽象化的DSL是更明智的选择。为什么会这么想？应该用面向对象的方式开发代码，觉得用二维的方式操作表是开发水平低下的表现。
应该分开考虑modeling和实际DB处理的方式。定义好模型，基于模型开发项目，DB的处理方式不是很重要。不管你用native query,ORM还是混合使用，找到最佳的方式最重要。一直使用Go语言开发项目，解决问题时相比理论更关注实用性(这才是Go的哲学)。关于ORM，Go社区也一定程度的同意这种观点。(不同意怎么办？想自己开发一个，实力不足，只能适应)。</description>
    </item>
    
    <item>
      <title>Go My Way #1 - web 框架</title>
      <link>https://limingxie.github.io/liche/go_my_way1/</link>
      <pubDate>Fri, 09 Mar 2018 18:23:09 +0800</pubDate>
      
      <guid>https://limingxie.github.io/liche/go_my_way1/</guid>
      <description>Go My Way #1 - web 框架 Jun 12, 2017
Ruby的Ruby on Rails，Java的Spring，Python的Django,Nodejs的Express。多数有人气的语言都有主流的web框架。所以不需要多想使用主流框架就可以以，但是Go没有这些。Go提倡根据情况合理的组合package。熟练了以后非常方便，但对于第一次接触Go的人选择package是困难的事情。
接触Go已有3年，过去1年中积极使用了Go语言。起初公司内只有自己使用Go，现在使用Go开发的同事多了起来。我们公司在中国提供it服务，目前阿里云里运营着5个linux服务器和2个windows服务器。共有50左右的服务，其中用Go开发的服务占10个左右。
就这样使用Go语言开发，有了自己的开发方式。我想通过3偏文章介绍Go语言开发。（太冗长，读者没有耐心读完，自己觉得也麻烦，呵呵）
 Go My Way #1 - web框架 Go My Way #2 - 数据库, 日志 Go My Way #3 - Configuration, Tracing, etc. gomobile  第一个主题是web框架。我觉得对这部分关注的人比较多，所以选择了它。
但是开发web应用程序，只有web框架是不够的。保存数据需要数据库，想保存日志，想追溯处理web请求的记录。想一一解决各种问题，需要更多的选择。所以在第2章和第3章对 DB, Logging, Tracing, Vendoring, Confugration, Test等功能一一介绍。
最后会对， gomobile 进行介绍。
在几个大会当中有对它的介绍，但实际用Go开发移动端有诸多不便。但我们公司的服务的app中有Go package。gomobile有制约事项，但考虑好制约事项开发项目也不错。最后会介绍在移动端怎么使用Go。
此后会用3个篇幅介绍开发web应用程序的方法。没有绝对正确的方式，Go也不提倡这种方式。我将介绍我们公司业务环境下对web应用程序的优化方式，环境不一样可能方式也不一样。在我们公司也有用其他方式开发项目。
对所介绍的内容的讨论，建议，争论，质疑，等
我将感谢任何形式的意见。
我的思想是永远开放的. ^^
ECHO
先讲结论，开发web应用程序时用echo来开发。
根据之前所说的内容开发了参考项目echosample(https://github.com/pangpanglabs/echosample)。有新的内容添加时会持续更新 echosample。开发新的服务时可以参考echosample。
非常欢迎想一起开发echosample的同事。
main 框架 - echo echo是没有明显缺点，只有必要的功能的轻量级框架。
Go有许多web框架，但功能大同小异。大部分会提供一下的功能。
 定义路由 Query String或者Body转换成 struct.</description>
    </item>
    
    <item>
      <title>Go项目中编写测试代码的经验</title>
      <link>https://limingxie.github.io/limingxie/go_test/</link>
      <pubDate>Fri, 09 Mar 2018 18:14:08 +0800</pubDate>
      
      <guid>https://limingxie.github.io/limingxie/go_test/</guid>
      <description>http://sabzil.org/writing-a-unit-test/
http://10.202.101.25:8090/pages/viewpage.action?pageId=12551088
备注：以下内容是我在学习过程所整理的内容，所以有些内容有可能不是正确。
为什么写测试代码? 我们做项目写代码的时候，已知会有这样的疑惑和担忧。
&amp;ldquo;我写的正确吗?&amp;rdquo; &amp;ldquo;我这么编写其他地方不会受到影响吗?&amp;rdquo;
我们之所有这样的担忧，我认为应该是一下2种原因导致的。 第一，编写代码以后，很难构建针对开发内容发出请求和响应请求的模块。 第二，编程的时候会忘记之前的定好的原则，违反这些原则有可能会有一些错误。
根据&amp;rdquo;测试驱动开发 TDD 实践和工具&amp;rdquo; 和 几篇博客文章以及几本书，再写测试代码的感觉能找出问题的原因。
所以我决定在进行中的项目里适用测试代码。
测试代码？ 写测试代码需要注意以下几点。 1. 通过 &amp;ldquo;提问 → 回答 → 优化 → 反复&amp;rdquo; 的过程，反复的编写测试代码，失败，再整理。 2. 测试的最小单位是函数，可以以函数为单位编写测试代码。 3. 设计的时候先定义行为然后在考虑行为的属性。
怎么写测试代码? Go 语言里的测试代码可以根据官方提供的 “testing” 包编写。
可以使用第三方工具更便捷的编写测试代码。 1. testify ( go get -u github.com/stretchr/testify ) 2. goconvey ( go get -u github.com/smartystreets/goconvey )
testify提供和 assert, http, mock, require, suite 一样的的包，更方便的让我们做检验。goconvey是更方便的让我们在网页里确认测试结果的工具。
goconvey是我们运行 goconvey会展示以下内容，让我们一眼能看出测试结果。 scr 1 我们可以通过 coverage 确认以下内容。 scr 2</description>
    </item>
    
  </channel>
</rss>